package render

import (
	"github.com/benpate/ghost/model"
	"github.com/benpate/ghost/service"
)

type Stream struct {
	stream  model.Stream
	factory service.Factory
}

func (s Stream) Token() string {
	return s.stream.Token
}

func (s Stream) Label() string {
	return s.stream.Label
}

func (s Stream) Description() string {
	return s.stream.Description
}

func (s Stream) ThumbnailImage() string {
	return s.stream.ThumbnailImage
}

func (s Stream) Data() map[string]interface{} {
	return s.stream.Data
}

func (s Stream) Parent() (Stream, error) {

	if s.stream.ParentID.IsZero() {
		return Stream{}, derp.New(404, "ghost.render.stream.Parent", "No Parent Element")
	}

	streamService := factory.Stream()

	stream, err := streamService.Load(s.stream.ParentID)

	if err != nil {
		return Stream{}, derp.Wrap(err, "ghost.render.stream.Parent", "Error loading Parent")
	}

	result := Stream{
		stream: stream,
		factory: s.factory,
	}

	return result, nil
}

func (s Stream) Children() ([]Stream, error) {

	var result []Stream
	var stream model.Stream

	streamService := factory.Stream()

	iterator, err := streamService.ListByParent(s.stream.StreamID)

	if err != nil {
		return result, derp.Wrap(err, "ghost.render.stream.Children", "Error loading child streams", s.stream).Report()
	}

	for iterator.Next(&stream) {
		render := Stream{
			stream: stream
			factory: s.factory,
		}
		result = append(result, render)
	}

	return result, nil
}

