package model

import (
	"github.com/EmissarySocial/emissary/tools/id"
	"github.com/benpate/data/journal"
	"github.com/benpate/form"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Product links to a product plan that a User has configured on their
// own account with a PaymentService.
type Product struct {
	ProductID           primitive.ObjectID `bson:"_id"`                 // Unique ID for the product
	UserID              primitive.ObjectID `bson:"userId"`              // Unique ID of the user who owns the product
	MerchantAccountID   primitive.ObjectID `bson:"merchantAccountId"`   // The MerchantAccount used to pay for this product
	MerchantAccountType string             `bson:"merchantAccountType"` // The type of MerchantAccount used to pay for this product (STRIPE, PAYPAL)
	RemoteID            string             `bson:"remoteId"`            // Unique ID of the product plan (generated by the payment processor)
	Name                string             `bson:"name"`                // Human-friendly name of the product
	Description         string             `bson:"description"`         // Human-friendly description of the product
	Price               string             `bson:"paymentAmount"`       // Human-friendly descrption of the Price (e.g. $5.00/month)
	RecurringType       string             `bson:"recurringType"`       // Type of recurring payment (e.g., ONETIME, WEEKLY, MONTHLY, YEARLY)
	IsFeatured          bool               `bson:"isFeatured"`          // If true, then this product is featured on the User's profile page

	// Embed journal to track changes
	journal.Journal `bson:",inline"`
}

// NewProduct returns a fully initialized Product object
func NewProduct() Product {
	return Product{
		ProductID: primitive.NewObjectID(),
	}
}

// ID returns the unique ID of this Product
func (product Product) ID() string {
	return product.ProductID.Hex()
}

func (product Product) Fields() []string {
	return []string{
		"_id",
		"merchantAccountId",
		"merchantAccountType",
		"name",
		"description",
		"isFeatured",
	}
}

/******************************************
 * AccessLister Interface
 ******************************************/

// State returns the current state of this Product.
// It is part of the AccessLister interface
func (product *Product) State() string {
	return "default"
}

// IsAuthor returns TRUE if the provided UserID the author of this Product
// It is part of the AccessLister interface
func (product *Product) IsAuthor(authorID primitive.ObjectID) bool {
	return false
}

// IsMember returns TRUE if this object directly represents the provided UserID
// It is part of the AccessLister interface
func (product *Product) IsMyself(userID primitive.ObjectID) bool {
	return product.UserID == userID
}

// GroupIDs returns a map of RoleIDs to GroupIDs
// It is part of the AccessLister interface
// TODO: This should probably be refactored.
// With the new authentication system, this should be a map of RoleIDs to GroupIDs
func (product *Product) RolesToGroupIDs(roleIDs ...string) id.Slice {
	return nil
}

// ProductID returns a map of RoleIDs to ProductIDs
// It is part of the AccessLister interface
func (product *Product) RolesToProductIDs(roleIDs ...string) id.Slice {
	return nil
}

/******************************************
 * Other Methods
 ******************************************/

func (product Product) LookupCode() form.LookupCode {
	return form.LookupCode{
		Value:       product.ID(),
		Label:       product.Name,
		Description: product.Description,
	}
}
