package model

import (
	"time"

	"github.com/benpate/data/journal"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Purchase represents a single person who has paid for a product
type Purchase struct {
	PurchaseID       primitive.ObjectID `bson:"_id"`              // Unique ID for the purchase
	UserID           primitive.ObjectID `bson:"userId"`           // Unique ID of the user that is being subscribed to
	GuestID          primitive.ObjectID `bson:"guestId"`          // Unique ID for the guest that has purchased this product
	ProductID        primitive.ObjectID `bson:"productId"`        // Unique ID of the product plan
	StateID          string             `bson:"stateId"`          // State of the product (e.g., active, expired, canceled)
	RemoteGuestID    string             `bson:"remoteGuestId"`    // ID generated by the merchant account for the user/purchaser
	RemoteProductID  string             `bson:"remoteProductId"`  // ID generated by the merchant account for the product/plan
	RemotePurchaseID string             `bson:"remotePurchaseId"` // ID generated by the merchant account for the purchase/purchase
	RecurringType    string             `bson:"recurringType"`    // Type of recurring payment (e.g., ONETIME, WEEKLY, MONTHLY, YEARLY)
	StartDate        int64              `bson:"startDate"`        // Unix epoch (in seconds) of the start date for this product
	EndDate          int64              `bson:"endDate"`          // Unix Epoch (in seconds) of the end date for this product

	// Embed journal to track changes
	journal.Journal `bson:",inline"`
}

func NewPurchase() Purchase {
	return Purchase{
		PurchaseID: primitive.NewObjectID(),
	}
}

func (purchase Purchase) ID() string {
	return purchase.PurchaseID.Hex()
}

func (purchase Purchase) Fields() []string {
	return []string{
		"_id",
		"emailAddress",
		"fediverseId",
	}
}

// IsActive returns TRUE if this purchase is currently active
func (purchase *Purchase) IsActive() bool {

	now := time.Now().Unix()

	if purchase.StateID != PurchaseStateActive {
		return false
	}

	if purchase.StartDate > now {
		return false
	}

	if purchase.EndDate < now {
		return false
	}

	return true
}

// UpdateWith updates the purchase with values from another object, and
// returns TRUE if any values were changed
func (purchase *Purchase) UpdateWith(other *Purchase) bool {

	changed := false

	if purchase.ProductID != other.ProductID {
		purchase.ProductID = other.ProductID
		changed = true
	}

	if purchase.GuestID != other.GuestID {
		purchase.GuestID = other.GuestID
		changed = true
	}

	if purchase.UserID != other.UserID {
		purchase.UserID = other.UserID
		changed = true
	}

	if purchase.RemoteGuestID != other.RemoteGuestID {
		purchase.RemoteGuestID = other.RemoteGuestID
		changed = true
	}

	if purchase.RemoteProductID != other.RemoteProductID {
		purchase.RemoteProductID = other.RemoteProductID
		changed = true
	}

	if purchase.RemotePurchaseID != other.RemotePurchaseID {
		purchase.RemotePurchaseID = other.RemotePurchaseID
		changed = true
	}

	if purchase.StateID != other.StateID {
		purchase.StateID = other.StateID
		changed = true
	}

	if purchase.StartDate != other.StartDate {
		purchase.StartDate = other.StartDate
		changed = true
	}

	if purchase.EndDate != other.EndDate {
		purchase.EndDate = other.EndDate
		changed = true
	}

	if purchase.RecurringType != other.RecurringType {
		purchase.RecurringType = other.RecurringType
		changed = true
	}

	return changed
}
