package model

import (
	"github.com/benpate/data/journal"
	"github.com/benpate/form"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Subscription links to a subscription plan that a User has configured on their
// own account with a PaymentService.
type Subscription struct {
	SubscriptionID      primitive.ObjectID `bson:"_id"`                 // Unique ID for the subscription
	UserID              primitive.ObjectID `bson:"userId"`              // Unique ID of the user who owns the subscription
	MerchantAccountID   primitive.ObjectID `bson:"merchantAccountId"`   // The MerchantAccount used to pay for this subscription
	MerchantAccountType string             `bson:"merchantAccountType"` // The type of MerchantAccount used to pay for this subscription (STRIPE, PAYPAL)
	RemoteID            string             `bson:"remoteId"`            // Unique ID of the subscription plan (generated by the payment processor)
	Name                string             `bson:"name"`                // Human-friendly name of the subscription
	Description         string             `bson:"description"`         // Human-friendly description of the subscription
	Price               string             `bson:"paymentAmount"`       // Human-friendly descrption of the Price (e.g. $5.00/month)
	RecurringType       string             `bson:"recurringType"`       // Type of recurring payment (e.g., ONETIME, WEEKLY, MONTHLY, YEARLY)
	IsFeatured          bool               `bson:"isFeatured"`          // If true, then this subscription is featured on the User's profile page

	// Embed journal to track changes
	journal.Journal `bson:",inline"`
}

// NewSubscription returns a fully initialized Subscription object
func NewSubscription() Subscription {
	return Subscription{
		SubscriptionID: primitive.NewObjectID(),
	}
}

// ID returns the unique ID of this Subscription
func (subscription Subscription) ID() string {
	return subscription.SubscriptionID.Hex()
}

func (subscription Subscription) Fields() []string {
	return []string{
		"_id",
		"merchantAccountId",
		"merchantAccountType",
		"name",
		"description",
		"isFeatured",
	}
}

/******************************************
 * RoleStateEnumerator Interface
 ******************************************/

// State returns the current state of this object.
// For subscriptions, there is no state, so it returns ""
func (subscription Subscription) State() string {
	return ""
}

// Roles returns a list of all roles that match the provided authorization.
// Since Subscriptions records should only be accessible by the Subscription owner, this
// function only returns MagicRoleMyself if applicable.  Others (like Anonymous
// and Authenticated) should never be allowed on an Subscription record, so they
// are not returned.
func (subscription Subscription) Roles(authorization *Authorization) []string {

	// Subscriptions are private, so only 'myself' and 'owner' are allowed
	if authorization.UserID == subscription.UserID {
		return []string{MagicRoleMyself, MagicRoleOwner}
	}

	// Intentionally NOT allowing MagicRoleAnonymous, or MagicRoleAuthenticated
	return []string{MagicRoleOwner}
}

/******************************************
 * Other Methods
 ******************************************/

func (subscription Subscription) LookupCode() form.LookupCode {
	return form.LookupCode{
		Value:       subscription.ID(),
		Label:       subscription.Name,
		Description: subscription.Description,
	}
}
