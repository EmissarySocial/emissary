package model

import (
	"time"

	"github.com/benpate/data/journal"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Subscriber represents a single person who has paid for a subscription
type Subscriber struct {
	SubscriberID   primitive.ObjectID `bson:"_id"`            // Unique ID for the subscriber
	SubscriptionID primitive.ObjectID `bson:"subscriptionId"` // Unique ID of the subscription plan
	UserID         primitive.ObjectID `bson:"userId"`         // Unique ID of the user that is being subscribed to
	EmailAddress   string             `bson:"emailAddress"`   // Email address of the subscriber
	FediverseID    string             `bson:"fediverseId"`    // Fediverse handle of the subscriber -- used to send subscription notifications
	Token          string             `bson:"token"`          // Unique ID of the subscription (generated by the payment processor)
	StateID        string             `bson:"stateId"`        // State of the subscription (e.g., active, expired, canceled)
	StartDate      int64              `bson:"startDate"`      // Unix epoch (in seconds) of the start date for this subscription
	EndDate        int64              `bson:"endDate"`        // Unix Epoch (in seconds) of the end date for this subscription
	RecurringType  string             `bson:"recurringType"`  // Type of recurring payment (e.g., ONETIME, WEEKLY, MONTHLY, YEARLY)

	// Embed journal to track changes
	journal.Journal `bson:",inline"`
}

// UpdateWith updates the subscriber with values from another object, and
// returns TRUE if any values were changed
func (subscriber *Subscriber) UpdateWith(other *Subscriber) bool {

	changed := false

	if subscriber.SubscriptionID != other.SubscriptionID {
		subscriber.SubscriptionID = other.SubscriptionID
		changed = true
	}

	if subscriber.UserID != other.UserID {
		subscriber.UserID = other.UserID
		changed = true
	}

	if subscriber.EmailAddress != other.EmailAddress {
		subscriber.EmailAddress = other.EmailAddress
		changed = true
	}

	if other.FediverseID != "" {
		if other.FediverseID != subscriber.FediverseID {
			subscriber.FediverseID = other.FediverseID
			changed = true
		}
	}

	if subscriber.Token != other.Token {
		subscriber.Token = other.Token
		changed = true
	}

	if subscriber.StateID != other.StateID {
		subscriber.StateID = other.StateID
		changed = true
	}

	if subscriber.StartDate != other.StartDate {
		subscriber.StartDate = other.StartDate
		changed = true
	}

	if subscriber.EndDate != other.EndDate {
		subscriber.EndDate = other.EndDate
		changed = true
	}

	if subscriber.RecurringType != other.RecurringType {
		subscriber.RecurringType = other.RecurringType
		changed = true
	}

	return changed
}

func NewSubscriber() Subscriber {
	return Subscriber{
		SubscriberID: primitive.NewObjectID(),
	}
}

func (subscriber Subscriber) ID() string {
	return subscriber.SubscriberID.Hex()
}

func (subscriber Subscriber) Fields() []string {
	return []string{
		"_id",
		"emailAddress",
		"fediverseId",
	}
}

// IsActive returns TRUE if this subscriber is currently active
func (subscriber *Subscriber) IsActive() bool {

	now := time.Now().Unix()

	if subscriber.StateID != SubscriberStateActive {
		return false
	}

	if subscriber.StartDate > now {
		return false
	}

	if subscriber.EndDate < now {
		return false
	}

	return true
}
