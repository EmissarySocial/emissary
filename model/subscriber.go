package model

import (
	"github.com/benpate/data/journal"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Subscriber represents a single person who has paid for a subscription
type Subscriber struct {
	SubscriberID      primitive.ObjectID `bson:"_id"`               // Unique ID for the subscriber
	SubscriptionID    primitive.ObjectID `bson:"subscriptionId"`    // Unique ID of the subscription plan
	UserID            primitive.ObjectID `bson:"userId"`            // Unique ID of the user that is being subscribed to
	SubscriptionToken string             `bson:"subscriptionToken"` // Unique ID of the subscription (generated by the payment processor)
	EmailAddress      string             `bson:"emailAddress"`      // Email address of the subscriber
	FediverseID       string             `bson:"fediverseID"`       // Fediverse handle of the subscriber -- used to send subscription notifications
	StateID           string             `bson:"stateId"`           // State of the subscription (e.g., active, expired, canceled)
	StartDate         int64              `bson:"startDate"`         // Unix epoch (in seconds) of the start date for this subscription
	EndDate           int64              `bson:"endDate"`           // Unix Epoch (in seconds) of the end date for this subscription
	RecurringType     string             `bson:"recurringType"`     // Type of recurring payment (e.g., ONETIME, WEEKLY, MONTHLY, YEARLY)

	// Embed journal to track changes
	journal.Journal `bson:",inline"`
}

func NewSubscriber() Subscriber {
	return Subscriber{
		SubscriberID: primitive.NewObjectID(),
	}
}

func (subscriber Subscriber) ID() string {
	return subscriber.SubscriberID.Hex()
}

func (subscriber Subscriber) Fields() []string {
	return []string{
		"_id",
		"subscriptionId",
		"emailAddress",
		"fediverseID",
		"stateId",
		"endDate",
	}
}

/******************************************
 * RoleStateEnumerator Interface
 ******************************************/

// State returns the current state of this object.
func (subscriber Subscriber) State() string {
	return subscriber.StateID
}

// Roles returns a list of all roles that match the provided authorization.
// Since Rule records should only be accessible by the rule owner, this
// function only returns MagicRoleMyself if applicable.  Others (like Anonymous
// and Authenticated) should never be allowed on an Rule record, so they
// are not returned.
func (subscriber Subscriber) Roles(authorization *Authorization) []string {

	// Rules are private, so only 'myself' and 'owner' are allowed
	if authorization.UserID == subscriber.UserID {
		return []string{MagicRoleMyself, MagicRoleOwner}
	}

	// Intentionally NOT allowing MagicRoleAnonymous, or MagicRoleAuthenticated
	return []string{MagicRoleOwner}
}
