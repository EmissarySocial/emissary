package model

import (
	"github.com/benpate/data/journal"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Privilege represents a single person who is a member of a circle
type Privilege struct {
	PrivilegeID       primitive.ObjectID `bson:"_id"`                        // Unique ID of this Privilege record
	IdentityID        primitive.ObjectID `bson:"identityId"`                 // Unique ID of the identity that is a member of the Circle
	UserID            primitive.ObjectID `bson:"userId"`                     // Unique ID of the User who owns the Circle or MerchantAccount
	CircleID          primitive.ObjectID `bson:"circleId,omitzero"`          // Unique ID of the Circle that this membership is associated with (if any)
	MerchantAccountID primitive.ObjectID `bson:"merchantAccountId,omitzero"` // Unique ID of the MerchantAccount that this membership is associated with (if any)
	RemotePersonID    string             `bson:"remotePersonId,omitzero"`    // ID generated by the merchant account for the user/member
	RemoteProductID   string             `bson:"remoteProductId,omitzero"`   // ID generated by the merchant account for the product/plan
	RemotePurchaseID  string             `bson:"remotePurchaseId,omitzero"`  // ID generated by the merchant account for the purchase/purchase

	// Embed journal to track changes
	journal.Journal `bson:",inline"`
}

func NewPrivilege() Privilege {
	return Privilege{
		PrivilegeID: primitive.NewObjectID(),
	}
}

func (privilege Privilege) ID() string {
	return privilege.PrivilegeID.Hex()
}

func (privilege Privilege) Fields() []string {
	return []string{
		"IdentityID",
		"RemoteEmailAddress",
		"RemotePersonID",
		"RemoteProductID",
		"RemotePurchaseID",
	}
}
