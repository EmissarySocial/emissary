package model

import (
	"github.com/EmissarySocial/emissary/tools/id"
	"github.com/benpate/data/journal"
	"github.com/benpate/rosetta/sliceof"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Privilege represents a single person who is a member of a circle
type Privilege struct {
	PrivilegeID      primitive.ObjectID `bson:"_id"`                       // Unique ID of this Privilege record
	IdentityID       primitive.ObjectID `bson:"identityId"`                // Unique ID of the identity that is a member of the Circle
	UserID           primitive.ObjectID `bson:"userId"`                    // Unique ID of the User who owns the Circle or MerchantAccount
	CircleID         primitive.ObjectID `bson:"circleId,omitzero"`         // Unique ID of the Circle that this membership is associated with (if any)
	RemotePersonID   string             `bson:"remotePersonId,omitzero"`   // ID generated by the merchant account for the user/member
	RemoteProductID  string             `bson:"remoteProductId,omitzero"`  // ID generated by the merchant account for the product/plan
	RemotePurchaseID string             `bson:"remotePurchaseId,omitzero"` // ID generated by the merchant account for the purchase/purchase
	IdentifierType   string             `bson:"identifierType"`            // Type of Identifier that this Privilege is bound to (EmailAddress or WebfingerHandle)
	IdentifierValue  string             `bson:"identifierValue"`           // Value of the Identifier that this Privilege is bound to

	// Embed journal to track changes
	journal.Journal `bson:",inline"`
}

func NewPrivilege() Privilege {
	return Privilege{
		PrivilegeID: primitive.NewObjectID(),
	}
}

func (privilege Privilege) ID() string {
	return privilege.PrivilegeID.Hex()
}

func (privilege Privilege) Fields() []string {
	return []string{
		"IdentityID",
		"RemoteEmailAddress",
		"RemotePersonID",
		"RemoteProductID",
		"RemotePurchaseID",
	}
}

/******************************************
 * AccessLister Interface
 ******************************************/

// State returns the current state of this Circle.
// It is part of the AccessLister interface
func (privilege *Privilege) State() string {
	return "default"
}

// IsAuthor returns TRUE if the provided UserID the author of this Privilege
// It is part of the AccessLister interface
func (privilege *Privilege) IsAuthor(authorID primitive.ObjectID) bool {
	return authorID == privilege.UserID
}

// IsMyself returns TRUE if this object directly represents the provided UserID
// It is part of the AccessLister interface
func (privilege *Privilege) IsMyself(userID primitive.ObjectID) bool {
	return false
}

// RolesToGroupIDs returns a slice of Group IDs that grant access to any of the requested roles.
// It is part of the AccessLister interface
func (privilege *Privilege) RolesToGroupIDs(roleIDs ...string) id.Slice {
	return nil
}

// RolesToPrivileges returns a slice of Privileges that grant access to any of the requested roles.
// It is part of the AccessLister interface
func (privilege *Privilege) RolesToPrivileges(roleIDs ...string) sliceof.String {
	return sliceof.NewString()
}

/******************************************
 * Other Getter Methods
 ******************************************/

func (privilege Privilege) IsPurchase() bool {
	return privilege.RemotePurchaseID != ""
}
