behavior MediaPlayer

	init

		tell <.media-show-when-playing /> in me
			hide yourself
		end

		tell <.media-show-when-paused /> in me
			show yourself
		end

		set :trackNumber to 0
		set :playButton to the first <.media-Play /> in me
		set :pauseButton to the first <.media-Pause /> in me
		set :nextButton to the first <.media-Next /> in me
		set :prevButton to the first <.media-Prev /> in me
		set :loopButton to the first <.media-Loop /> in me
		set :progressBar to the first <.media-Progress /> in me
		set :media to the first <audio,video /> in me

		-- save original values for the name, artist, and image
		set :name to the first <.media-Name /> in me
		set :artist to the first <.media-Artist /> in me
		set :image to the first <.media-Image /> in me

		if the :name is not null then
			set the :name's @data-original to the :name's innerText
		end

		if the :artist is not null then
			set the :artist's @data-original to the :artist's innerText
		end

		if the :image is not null then
			set the :image's @data-original to the :image's @src
		end
	end

	on click from <.media-Play /> in me
		trigger Play
	end

	on click from <.media-Pause /> in me
		trigger Pause
	end

	on click from <.media-Prev /> in me
		trigger Prev
	end

	on click from <.media-Next /> in me
		trigger Next
	end

	on DragStart from <.media-Progress /> in me
		pause() the :media
	end

	on DragEnd from <.media-Progress /> in me
		set percent to the :progressBar's @value
		trigger Seek(percent:percent)
		play() the :media
	end

	on timeupdate from <audio /> in me or
		timeupdate from <video /> in me

		if :media.duration is undefined then
			exit
		end

		if :progressBar is undefined then
			exit
		end

		set percent to (:media.currentTime / :media.duration) * 100
		send MoveHandle(percent:percent) to :progressBar
	end

	on ended from <audio /> in me or
		ended from <video /> in me
		trigger Next
	end

	on Play(trackNumber)

		set tracks to <[data-track-url] /> in me

		if trackNumber is empty then 
			set trackNumber to :trackNumber
		end

		if trackNumber < 0 then 

			set :trackNumber to 0

			if :loopButton is undefined then
				trigger Pause
				exit
			end

			if not :loopButton.classlist.contains("selected") then
				trigger Pause
				exit
			end

		else if trackNumber >= tracks.length then

			set :trackNumber to 0

			if :loopButton is undefined then
				trigger Pause
				exit
			end

			if not :loopButton.classlist.contains("selected") then
				trigger Pause
				exit
			end

		else 
			set :trackNumber to trackNumber
		end

		set trackElement to tracks[trackNumber]
		set url to the trackElement's @data-track-url

		if url is empty then
			exit
		end

		if url is not equal to :media's @src then
			set :media.src to url
		end

		play() the :media

		take .playing from tracks for trackElement

		tell <.media-show-when-playing /> in me
			show yourself
		end

		tell <.media-show-when-paused /> in me
			hide yourself
		end

		if :name is not undefined then
			set the :name's innerText to (the trackElement's @data-track-name or the :name's @data-original)
		end

		if :artist is not undefined then
			set the :artist's innerText to (the trackElement's @data-track-artist or the :artist's @data-original)
		end

		if :image is not undefined then
			set the :image's @src to (the trackElement's @data-track-image or the :image's @data-original)
		end

	end

	on Seek(percent)
		if :media.duration is undefined then
			exit
		end

		set :media.currentTime to (:media.duration * (percent / 100))
	end

	on Pause

		pause() the :media

		for trackElement in <[data-track-url] /> in me
			remove .playing from trackElement
		end

		tell <.media-show-when-playing /> in me
			hide yourself
		end

		tell <.media-show-when-paused /> in me
			show yourself
		end

		if the :name is not null then
			set the :name's innerText to the :name's @data-original
		end

		if the :artist is not null then
			set the :artist's innerText to the :artist's @data-original
		end

		if the :image is not null then
			set the :image's @src to the :image's @data-original
		end
	end

	on Prev
		set nextTrackNumber to :trackNumber - 1
		trigger Play(trackNumber:nextTrackNumber)
	end

	on Next
		set nextTrackNumber to :trackNumber + 1
		trigger Play(trackNumber:nextTrackNumber)
	end

	on SetProgress(percent) from <audio /> in me
		
		if :media.duration is not undefined then
			set :media.currentTime to (:media.duration * (percent / 100))
		end
	end

end
