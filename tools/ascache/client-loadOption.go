package ascache

// LoadConfig is a configuration object that used by the Load() method.
// It is generated by combining a default value with any functional options that are passed to the Load() method.
type LoadConfig struct {
	forceReload bool
}

// isCacheAllowed returns TRUE if the cache is allowed to be used for this request.
func (config LoadConfig) isCacheAllowed() bool {
	return !config.forceReload
}

// LoadOption is a functional option that can be passed to the Load() method.
type LoadOption func(*LoadConfig)

// NewLoadConfig creates a new LoadConfig object, and applies any functional options that are passed to it.
func NewLoadConfig(options ...any) LoadConfig {
	result := LoadConfig{
		forceReload: false,
	}

	result.With(options...)
	return result
}

// With applies functional options to the LoadConfig object
func (config *LoadConfig) With(options ...any) {
	for _, option := range options {
		if typed, ok := option.(LoadOption); ok {
			typed(config)
		}
	}
}

// WithForceReload is a functional option that forces the cache to be reloaded from the source.
func WithForceReload() LoadOption {
	return func(config *LoadConfig) {
		config.forceReload = true
	}
}

// WithoutForceReload is a functional option that does not force the cache to be reloaded from the source.
func WithoutForceReload() LoadOption {
	return func(config *LoadConfig) {
		config.forceReload = false
	}
}
